from carlib.persistence.Constraints import Constraints

my_string = "%i + %i = %i" % (1,2,3)
string_two = "my homework!"
string_3 = my_string+string_two
print(my_string)
print(string_3)

float_string3 = "%.2f" % (1.237)
print(float_string3)
print("%(x)i + %(y)i = %(z)i" % {"x":1, "y":2,"z":5})

for number in range(5):
       print(number)

for number in [0, 1, 2, 3, 4]:
    print(number)
print("\n\n")


a_dict = {"one": 1, "two": 2, "three": 3}
for key in a_dict:
        print(key)
print("\n\n")

a_dict = {1:"one", 2:"two", 3:"three"}
keys = a_dict.keys()
keys = sorted(keys)
print(keys)
for key in keys:
    print(key)
print("\n\n")


my_list = [1, 2, 3, 4, 5]

for i in my_list:
    if i == 3:
        print("Item found!")
        break
    print(i)
else:
    print("Item not found!")


try:
        1 / 0
except Exception:
    print("You cannot divide by zero!")
print("\n\n")



try:
    handle = open("/home/carana/Derco/alessandra_Paso_02.sql", "r")
    data = handle.read()
    print(data)
    handle.close()
except:
    print ('Error')

print("\n\n")
print("================\n\n")
print("Nueva Lectura\n\n")

try:
    handle = open("/home/carana/Derco/alessandra_Paso_02.sql", "r")
    data = handle.readline()
    print(data)
except:
    print ('Error')
finally:
    print ('Cerrando')
    handle.close()


print("\n\n")
print("================\n\n")
print("Nueva Lectura\n\n")

handle = None
try:
    handle = open("/home/carana/Derco/alessandra_Paso_023.sql", "r")
    while True:
        data = handle.read(1024)
        print(data)
        if not data:
            break
except Exception as e:
    print("Error leyendo "+e.strerror)
finally:
    print ('Cerrando')
    if handle != None:
        handle.close()

print("\n\n")
print("================\n\n")
print("Nueva Lectura\n\n")
try:
    with open("/home/carana/Derco/alessandra_Paso_02.sql") as file_handler:
        for line in file_handler:
            print(line)
except Exception as e:
    print("Error leyendo "+e.strerror)


print("\n\n")
print("================\n\n")
def add(a, b):
    return a + b

valor = add(5,1)
print(valor)
print(type(valor))

print("\n\n")
print("================\n\n")
print(dir("Soy un string"))


print("\n\n")
print("================\n\n")
import csv

def csv_reader(file_obj):
    """
    Read a csv file
    """
    reader = csv.reader(file_obj)
    for row in reader:
        print(" ".join(row))

if __name__ == "__main__":
    csv_path = "/home/carana/Derco/veritrade_autos_06_2017_final.csv"
    with open(csv_path, "r") as f_obj:
        csv_reader(f_obj)


print("\n\n")
print("================\n\n")
import csv

def csv_dict_reader(file_obj):
    """
    Read a CSV file using csv.DictReader
    """
    reader = csv.DictReader(file_obj, fieldnames={"comment","data1","data2"},delimiter=',')
    for line in reader:
        print(line["data1"],line["data2"]),

if __name__ == "__main__":
    with open("/home/carana/Derco/veritrade_autos_06_2017_final.csv") as f_obj:
        csv_dict_reader(f_obj)


d1 ={
    'test1': {'f1':'field1','value':'3241'},
    'test2': {'f2':'field2','value2': '3242'},
}

print()
d1={}
d1['test1'] = {'value':1234,'operator':'and', 'call_order': 0}
d1['test2'] = {'value':1235,'operator':'or', 'call_order': 1}

print(d1['test1']['value'])
print(d1['test2']['value'])

d2 = {'test1':2,'test2':1,'test3':0}
from collections  import OrderedDict
d3 = OrderedDict(sorted(d2.items(), key=lambda t: t[1]))

for f,o in d3.items():
    print(f)
    print(o)

t1={}
t1['add'] =[]
t1['add'].append({'value':1235, 'call_order': 2})
t1['add'].append({'value':1236, 'call_order': 1})

t1['del'] = []
t1['del'].append({'value':123, 'call_order': 2})
t1['del'].append({'value':126, 'call_order': 1})

#t1['add']['the_field_name_1'].add({'value':1235,'operator':'or', 'call_order': 1})
#t1['add']['the_field_name_2'].add({'value':1236,'operator':'and', 'call_order': 2})
#t1['add']['the_field_name_2'].add({'value':1236,'operator':'and', 'call_order': 2})

print("===============================================")
print("===============================================")


tadd = t1['add']
print(tadd[0])
print(tadd[0]['value'])

print("===============================================")
print("===============================================")
for row in tadd:
    print(row['value'])

d4 = sorted(tadd, key=lambda t: t['call_order'])

for f in d4:
    print(f)
    print(f['value'])

print("===============================================")
print("===============================================")
for row in tadd:
    print(row['value'])

constaints = Constraints()
constaints.add_caller_parameter(Constraints.CallerOperation.ADD,100,1)
constaints.add_caller_parameter(Constraints.CallerOperation.ADD,'fieldvalue',0)

params = constaints.get_caller_params(Constraints.CallerOperation.ADD)
for f in params:
    print(f['value'])
    print(f['call_order'])
